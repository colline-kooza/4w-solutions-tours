// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String
  firstName     String?
  lastName      String?
  phone         String?   @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  password      String?
  status        Boolean   @default(true)
  accounts      Account[]
  sessions      Session[]
  blogs         Blog[]
  bookings      Booking[]
  reviews       Review[]
  isVerified    Boolean   @default(false)
  token         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Category {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  imageUrl    String?
  description String
  tours       Tour[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Blog {
  id            String       @id @default(cuid())
  title         String
  slug          String       @unique
  description   String?      @db.Text // Meta description for SEO
  thumbnail     String?
  content       String?      @db.Text
  published     Boolean?     @default(false)
  featured      Boolean?     @default(false)
  author        User         @relation(fields: [authorId], references: [id])
  authorId      String
  authorName    String
  authorImage   String?
  authorTitle   String?
  category      BlogCategory @relation(fields: [categoryId], references: [id])
  categoryId    String
  categoryTitle String
  readingTime   Int? // Estimated reading time in minutes
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model BlogCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  blogs     Blog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tour {
  id               String           @id @default(cuid())
  title            String
  slug             String           @unique
  description      String?          @default("Tour description coming soon...") @db.Text
  shortDescription String?
  images           String[]         @default([])
  price            Float?           @default(0)
  discountPrice    Float?
  duration         Int?             @default(1)
  maxGroupSize     Int?             @default(10)
  difficulty       TourDifficulty?  @default(EASY)
  category         Category         @relation(fields: [categoryId], references: [id])
  categoryId       String
  location         String?          @default("Location TBD")
  coordinates      Json? // Store lat/lng as JSON
  includes         String[]         @default([])
  excludes         String[]         @default([])
  itinerary        TourItinerary[]
  attractions      TourAttraction[]
  bookings         Booking[]
  reviews          Review[]
  featured         Boolean          @default(false)
  active           Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  Destination      Destination?     @relation(fields: [destinationId], references: [id])
  destinationId    String?

  @@index([categoryId])
  @@index([featured])
  @@index([active])
}

enum TourDifficulty {
  EASY
  MODERATE
  CHALLENGING
  DIFFICULT
}

model TourItinerary {
  id          String   @id @default(cuid())
  tour        Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
  tourId      String
  day         Int
  title       String
  description String   @db.Text
  activities  String[]

  @@index([tourId])
}

model Attraction {
  id          String           @id @default(cuid())
  name        String
  description String?          @db.Text
  location    String
  images      String[]
  type        AttractionType
  tours       TourAttraction[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

enum AttractionType {
  HISTORICAL
  NATURAL
  CULTURAL
  ADVENTURE
  RELIGIOUS
  ENTERTAINMENT
  MUSEUM
  PARK
}

model Destination {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String? @db.Text

  // Media
  images String[] @default([])

  // Travel Information
  bestTimeToVisit String? // e.g., "March to May, September to November"
  climate         DestinationClimate? @default(TROPICAL)

  active   Boolean @default(true)
  verified Boolean @default(false)

  tours     Tour[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([active])
}

enum DestinationClimate {
  TROPICAL
  TEMPERATE
  ARID
  CONTINENTAL
  POLAR
  MEDITERRANEAN
  SUBTROPICAL
  MONSOON
}

model TourAttraction {
  id           String     @id @default(cuid())
  tour         Tour       @relation(fields: [tourId], references: [id], onDelete: Cascade)
  tourId       String
  attraction   Attraction @relation(fields: [attractionId], references: [id], onDelete: Cascade)
  attractionId String
  visitOrder   Int?
  duration     Int?

  @@unique([tourId, attractionId])
  @@index([tourId])
  @@index([attractionId])
}

model Booking {
  id              String        @id @default(cuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  tour            Tour          @relation(fields: [tourId], references: [id])
  tourId          String
  bookingDate     DateTime      @default(now())
  tourDate        DateTime 
  numberOfPeople  Int
  totalAmount     Float
  status          BookingStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentId       String? 
  specialRequests String? 
  contactPhone    String
  contactEmail    String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId])
  @@index([tourId])
  @@index([status])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Review {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tour      Tour     @relation(fields: [tourId], references: [id])
  tourId    String
  rating    Int // 1-5 stars
  title     String?
  comment   String?  @db.Text
  helpful   Int      @default(0) // How many people found this helpful
  verified  Boolean  @default(false) // Whether this is from a verified booking
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tourId])
  @@index([tourId])
  @@index([rating])
}

model Team {
  id        String   @id @default(cuid())
  name      String
  nickname  String?
  position  String
  image     String?  @default("/placeholder.png")
  bio       String?  @db.Text
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
}
